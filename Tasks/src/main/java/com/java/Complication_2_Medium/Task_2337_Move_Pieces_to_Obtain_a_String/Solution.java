package com.java.Complication_2_Medium.Task_2337_Move_Pieces_to_Obtain_a_String;

/**
 * Класс предоставляет решение задачи о проверке возможности преобразования одной строки в другую,
 * путем перемещения символов 'L' и 'R'.
 */
class Solution {

    /**
     * Основной метод для проверки возможности преобразования строки start в строку target.
     *
     * @param start Исходная строка, состоящая из символов 'L', 'R' и '_'
     * @param target Целевая строка, которая должна получиться после возможных перемещений
     * @return true, если возможно преобразование start в target согласно правилам, иначе false
     */
    public boolean canChange(String start, String target) {

        // Если строки не совпадают по количеству символов, вернуть false
        if (!same(start, target)) return false;

        // Инициализируем счетчики для разницы между L и R
        int left = 0, right = 0;

        // Проходим по обеим строкам параллельно
        for (int i = 0, j = 0; i < start.length(); i++, j++) {
            char s = start.charAt(i);   // Текущий символ в исходной строке
            char t = target.charAt(j);  // Текущий символ в целевой строке

            // Учитываем движение символов
            if (s == 'R') right++;  // Если R в исходной строке, увеличиваем счетчик правых
            if (s == 'L') left--;   // Если L в исходной строке, уменьшаем счетчик левых

            // Проверяем, чтобы разница была корректной
            if (left != 0 && right != 0) return false; // Нельзя одновременно двигать в обе стороны

            if (t == 'R') right--;  // Если R в целевой строке, уменьшаем счетчик правых
            if (t == 'L') left++;   // Если L в целевой строке, увеличиваем счетчик левых

            // Проверка на недопустимые ситуации
            if (left == -1 || right == -1) return false;    // Нарушение направления движения
            if (left > 0 && right > 0) return false;        // Движение в обе стороны одновременно
        }
        return true; // Если все прошло успешно, возвращаем true
    }

    /**
     * Вспомогательный метод для проверки того, содержат ли две строки одинаковое количество символов 'L', 'R' и '_'.
     *
     * @param a Первая строка для сравнения
     * @param b Вторая строка для сравнения
     * @return true, если строки содержат одинаковое количество символов 'L', 'R' и '_', иначе false
     */
    private boolean same(String a, String b) {
        // Объявляем счетчики для каждого типа символов в обеих строках
        int aLefts = 0, aRights = 0, aDash = 0;
        int bLefts = 0, bRights = 0, bDash = 0;

        // // Проходимся по каждой позиции в строках и считаем количество символов
        for (int i = 0; i < a.length(); i++) {
            char A = a.charAt(i); // Берем текущий символ из первой строки
            char B = b.charAt(i); // Берем текущий символ из второй строки

            // Увеличиваем соответствующие счетчики
            if (A == 'L') aLefts++;         // Если символ L в первой строке
            else if (A == 'R') aRights++;   // Если символ R в первой строке
            else aDash++;                   // Иначе это _

            if (B == 'L') bLefts++;         // Аналогично для второй строки
            else if (B == 'R') bRights++;
            else bDash++;
        }

        // Сравниваем полученные значения
        return (aLefts == bLefts) && aRights == bRights && aDash == bDash;
    }
}